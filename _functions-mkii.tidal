import Sound.Tidal.Utils

let 
    shift p = (1024 <~) $ p
    shift' n p = (n <~) $ p
    shrand n = shift' n $ rand
    one p = stutWith 2 (0.125/2) id $ p
    one' p = rarely (stutWith 2 (0.125/2) id) $ shift' 1024 $ p
    one'' p = sometimes (stutWith 2 (0.125/2) id) $ shift' 1024 $ p
    rep n p = stutWith (n) (0.125*3) id $ p
    rep' n p = stutWith (n) (0.125/2*3) id $ p
    rep'' n p = stutWith (n) (0.125/4*3) id $ p
    move p = foldEvery [3,4] (0.25 <~) $ p
    move'' p = foldEvery [2,3] (0.25 <~) $ p
    move' p = foldEvery [3,4] (0.25 ~>) $ p
    move''' p = foldEvery [2,3] (0.25 ~>) $ p
    replicator text1 = [putStr (text1) | x <- replicate 500 text1]
    flood text2 = sequence_(replicator text2)
    replicator' n text1 = [putStr (text1) | x <- replicate n text1]
    flood' n text2 = sequence_(replicator' n text2)
    gtfo = (const $ s "~")
    g = gtfo
    del = gtfo
    rollany x p = off x id $ p
    roll p = rollany (0.125*3) $ p
    roll' p = rollany (0.0625*3) $ p
    roll'' p = rollany ((0.0625)*2) $ p
    rollAny = rollany
    rollBy = rollAny
    rollby = rollBy
    degBy = degradeBy
    deg0 = degradeBy 0.0
    deg1 = degradeBy 0.1
    deg2 = degradeBy 0.2
    deg3 = degradeBy 0.3
    deg4 = degradeBy 0.4
    deg5 = degradeBy 0.5
    deg6 = degradeBy 0.6
    deg7 = degradeBy 0.7
    deg8 = degradeBy 0.8
    deg9 = degradeBy 0.9
    deg10 = degradeBy 1
    chan = 15
    -- stdsynth chan = s "midi" # midichan chan
    _pickF i fs p =  (fs !!! i) p
    pickF pi fs pat = innerJoin $ (\i -> _pickF i fs pat) <$> pi
    noff = (|+ note "-24")
    bass2 = s "midi" # midichan 0 # gain 1.2
    bass = s "midi" # midichan 1 # gain 1.2
    kick = s "midi" # midinote 2 # gain 1.2
    kickalt = s "midi" # midinote 0 # gain 1.2
    clap = s "midi" # midinote 3 # gain 1.2
    synth num = s "midi" # midichan num # gain 1.2
    percrun = midinote "{8 10 11}%16" # s "midi" # gain 1.2
    percrand = s "midi" # midinote (shift' 9090 $ choose [8,10,11]) # gain 1.2
    ch = s "midi" # midinote 8 # gain 1.2
    oh = s "midi" # midinote 9 # gain 1.2
    cy = s "midi" # midinote 10 # gain 1.2
    cb = s "midi" # midinote 11 # gain 1.2
    xfader = ccn 4 # ccv 0 # s "midi" # midichan 15
    synthOff = (# gain 0.4)
    synthOn = (# gain 1.2)
    xfadeOn = (# ccv 1)
    xfadeOff = (# ccv 0)
    xfadeon = xfadeOn
    xfadeoff = xfadeOff
    synthoff = synthOff
    synthon = synthOn
    hold x p = discretise x $ p
    bitcc x p = (# ccv (shift' x $ choose [0,127])) $ p
    fullcc x p = (# ccv (range 0 127 $ shrand x)) $ p
    halfcc x p = (# ccv (range 0 64 $ shrand x)) $ p
    pluckcc x p = (# ccv (range 30 80 $ shrand x)) $ p
    xcc = ccn 1 
    ycc = ccn 2 
    zcc = ccn 3 
    harm = ccn 5 
    ph = ccn 8 
    phwidth = ccn 6 
    phoff = ccn 7 
    blur = ccn 10
    mix = ccn 11
    amprel = ccn 12
    prism = ccn 13
    pluck = ccn 9
    scenecc = ccn 92
    kicklencc = ccn 37
    percrevcc = ccn 44
    enginecc = ccn 15
    rsengine = ccv 4 # enginecc
    bdclassicengine = ccv 1 # enginecc
    fullx = fullcc 100 $ xcc
    fully = fullcc 101 $ ycc
    fullz = fullcc 102 $ zcc
    bitharm = bitcc 103 $ harm
    fullharm = fullcc 103 $ harm
    bitph = bitcc 104 $ ph
    fullphoff = fullcc 105 $ phoff
    fullphwidth = fullcc 106 $ phwidth    
    fullscenes1 = (# ccv (shift' 107 $ choose [0,1])) $ scenecc
    fullscenes2 = (# ccv (shift' 107 $ choose [0,1,2])) $ scenecc
    fullblur = halfcc 108 $ blur
    fullpluck = pluckcc 109 $ pluck
    fullmix = fullcc 110 $ mix
    fullprism = fullcc 111 $ prism
    randscene1 = fullscenes1
    randscene2 = fullscenes2
    randkicklen = ccv (shift' 8393 $ choose [0,0,127]) # kicklencc
    fullkicklen = ccv 127 # kicklencc
    nokicklen = ccv 0 # kicklencc
    kickshort = nokicklen
    kicklong = fullkicklen
    randpercrev = ccv (shift' 1919 $ choose [0,0,127]) # percrevcc
    sometimesRep varyAmt replacement p = pickF (sometimesBy varyAmt (const $ "1") $ "0") [id, replacement] $ p
    sometimesRepl = sometimesRep
    sRep = sometimesRep
    sRepl = sRep
    sb = sometimesBy
    sh = shift'
    ss = shift'
    amprelon = xfadeon
    ampreloff = xfadeoff
    slicepat :: Int -> Pattern Int -> Pattern a -> Pattern a
    slicepat n pi pat = squeezeJoin $ zoompat <$> pi
      where zoompat i = zoom (i'/(fromIntegral n), (i'+1)/(fromIntegral n)) pat
              where i' = fromIntegral $ i `mod` n